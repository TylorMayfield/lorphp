
#!/usr/bin/env php
<?php
// --- LorPHP Core Application and Event Dispatcher Integration ---
require_once __DIR__ . '/../src/Core/Bootstrap.php';
use LorPHP\Core\Application;

// Instantiate the application (for DI, events, etc.)
$app = new Application();

// Event test command
if ($argc > 1 && $argv[1] === 'event:test') {
    $app->getEvents()->listen('test', function($msg) {
        echo "Event received: $msg\n";
    });
    $app->getEvents()->dispatch('test', 'Hello from event!');
    exit(0);
}

// DB reset command: drops and recreates the SQLite database, then runs all migrations
if ($argc > 1 && $argv[1] === 'db:reset') {
    $dbFile = __DIR__ . '/../storage/database.sqlite';
    if (file_exists($dbFile)) {
        unlink($dbFile);
        echo "Database file deleted.\n";
    }
    // Recreate the SQLite file (it will be created by migrations)
    touch($dbFile);
    echo "Database file created.\n";
    // Run all migrations
    passthru("php " . __FILE__ . " migrate:run");
    exit(0);
}

// Entity generator command (model, interface, controller)
// (Now reads from database/schema.json)
if ($argc > 1 && $argv[1] === 'generate') {
    $force = false;
    for ($i = 2; $i < $argc; $i++) {
        if ($argv[$i] === '--force') {
            $force = true;
            break;
        }
    }

    $schemaFile = __DIR__ . '/../database/schema.json'; // Changed to .json
    if (!file_exists($schemaFile)) {
        echo "database/schema.json not found!\n";
        exit(1);
    }

    // 1. Generate migrations based on schema diff
    $migrationScript = __DIR__ . '/generate-migrations.php';
    if (file_exists($migrationScript)) {
        echo "Generating migrations...\n";
        passthru("php $migrationScript --schema $schemaFile"); 
    }

    // 2. Generate all interfaces
    $interfaceScript = __DIR__ . '/generate-interfaces.php';
    if (file_exists($interfaceScript)) {
        echo "Generating interfaces...\n";
        passthru("php $interfaceScript --schema $schemaFile");
    }

    // 3. Parse schema to get entity names
    echo "Loading entities from schema...\n";
    
    $schemaContent = file_get_contents($schemaFile);
    if ($schemaContent === false) {
        echo "Error: Could not read schema file: $schemaFile\n";
        exit(1);
    }

    $schemaData = json_decode($schemaContent, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        echo "Error parsing JSON from $schemaFile: " . json_last_error_msg() . "\n";
        exit(1);
    }

    $entityNames = [];
    if (isset($schemaData['entities']) && is_array($schemaData['entities'])) {
        $entityNames = array_keys($schemaData['entities']);
    }
    
    if (empty($entityNames)) {
        echo "No entities found in $schemaFile. Skipping model and controller generation.\n";
    } else {
        echo "Found entities: " . implode(', ', $entityNames) . "\n";

        $modelScript = __DIR__ . '/generate-model.php';
        $controllerScript = __DIR__ . '/generate-controller.php';

        // 4. For each entity, generate model and controller
        foreach ($entityNames as $entityName) {
            if (!is_string($entityName) || empty($entityName)) {
                echo "Warning: Invalid entity name found in schema. Skipping: " . print_r($entityName, true) . "\n";
                continue;
            }
            echo "Processing entity: $entityName\n";

            // a. Generate model for the entity
            if (file_exists($modelScript)) {
                echo "  Generating model for $entityName...\n";
                $cmd = "php $modelScript \"$entityName\" --schema \"$schemaFile\"";
                if ($force) {
                    $cmd .= " --force";
                }
                passthru($cmd);
            }

            // b. Generate controller for the entity
            if (file_exists($controllerScript)) {
                echo "  Generating controller for $entityName...\n";
                passthru("php $controllerScript \"$entityName\" --schema $schemaFile");
            }
        }
    }

    echo "Generation process completed.\n";
    exit(0);
}

require_once __DIR__ . '/helpers/routes.php';
// Route management commands
if ($argc > 2 && $argv[1] === 'route:add') {
    // ./lor route:add METHOD PATH HANDLER
    $method = strtoupper($argv[2]);
    $path = $argv[3] ?? null;
    $handler = $argv[4] ?? null;
    if (!$path || !$handler) {
        echo "Usage: ./lor route:add METHOD PATH HANDLER\n";
        exit(1);
    }
    addRoute($method, $path, $handler);
    exit(0);
}

if ($argc > 1 && $argv[1] === 'route:list') {
    listRoutes();
    exit(0);
}

if ($argc > 2 && $argv[1] === 'route:remove') {
    $path = $argv[2];
    removeRoute($path);
    exit(0);
}

if (php_sapi_name() !== 'cli') {
    die('This script can only be run from the command line');
}

// Register autoloader
spl_autoload_register(function ($class) {
    // Convert namespace to full file path
    if (strpos($class, 'LorPHP\\Database\\Migrations\\') === 0) {
        $base_dir = __DIR__ . '/../database/migrations/';
        $parts = explode('\\', $class);
        $migrationFile = $base_dir . $parts[count($parts)-1] . '.php';
        
        // Try direct match first
        if (file_exists($migrationFile)) {
            require_once $migrationFile;
            return;
        }
        
        // If not found, try to match the class name to numbered migration files
        $files = glob($base_dir . '*.php');
        if (!empty($files)) {
            require_once $files[0];
            return;
        }
    } else {
        $base_dir = __DIR__ . '/../src/';
        $file = str_replace('\\', '/', $class) . '.php';
        $file = $base_dir . str_replace('LorPHP/', '', $file);
        
        if (file_exists($file)) {
            require $file;
        }
    }
});

// Show detailed errors
error_reporting(E_ALL);
ini_set('display_errors', '1');

function showHelp() {
    echo "\nLorPHP Command Line Tool\n";
    echo "========================\n\n";
    echo "Usage:\n";
    echo "  ./lor <command> [options]\n\n";
    echo "Available commands:\n";
    echo "  migrate:create <name>      Create a new migration file (e.g., add_users_table)\n";
    echo "  migrate:run                Run all pending migrations\n";
    echo "  migrate:rollback           Rollback the last batch of migrations\n";
    echo "  orm:generate-interfaces    Generate model interfaces and PHPDoc\n";
    echo "  generate                   Generate models, interfaces, and controllers from database/schema.lorphp\n";
    echo "  db:reset                  Drop and recreate the SQLite database, then run all migrations\n";
    echo "  make:controller <Entity>   Generate a controller from its interface\n";
    echo "  route:add METHOD PATH HANDLER   Add a route (e.g., GET /clients ClientController@index)\n";
    echo "  route:list                 List all routes\n";
    echo "  route:remove PATH          Remove a route by path\n";
    echo "  event:test                 Dispatch a test event\n";
    echo "  help                       Show this help message\n\n";
    echo "Examples:\n";
    echo "  ./lor migrate:create add_users_table\n";
    echo "  ./lor migrate:run\n";
    echo "  ./lor migrate:rollback\n";
    echo "  ./lor orm:generate-interfaces\n";
    echo "  ./lor make:entity Client name:string email:string\n";
    echo "  ./lor make:model Client name:string email:string\n";
    echo "  ./lor db:reset\n";
    echo "  ./lor make:controller Client\n";
    echo "  ./lor route:add GET /clients ClientController@index\n";
    echo "  ./lor route:list\n";
    echo "  ./lor route:remove /clients\n\n";
    echo "Run './lor help' to see this message.\n";
}
// Controller generator command
if ($argc > 2 && $argv[1] === 'make:controller') {
    $entity = $argv[2];
    $script = __DIR__ . '/generate-controller.php';
    if (!file_exists($script)) {
        echo "bin/generate-controller.php not found!\n";
        exit(1);
    }
    passthru("php $script $entity");
    exit(0);
}



require_once __DIR__ . '/helpers/migrations.php';
require_once __DIR__ . '/helpers/interfaces.php';
require_once __DIR__ . '/helpers/migrate_commands.php';


// Get the command from arguments
if ($argc < 2) {
    showHelp();
    exit(0);
}

$input = $argv[1];

// ORM Interface Generation
if ($input === 'orm:generate-interfaces') {
    generateOrmInterfaces();
    exit(0);
}

// Help command
if ($input === 'help') {
    showHelp();
    exit(0);
}

$parts = explode(':', $input);
if (count($parts) === 2 && $parts[0] === 'migrate') {
    $command = $parts[1];
    $name = isset($argv[2]) ? $argv[2] : null;
    handleMigrateCommand($command, $name);
    exit(0);
} else if (strpos($input, 'migrate') === 0) {
    echo "Error: Unknown command '{$input}'\n\n";
    showHelp();
    exit(1);
}
