<?php

/**
 * This file is auto-generated by LorPHP.
 * Generated on: 2025-05-23 20:36:52
 * 
 * WARNING: Do not edit this file manually.
 * Any changes will be overwritten when the file is regenerated.
 */
namespace LorPHP\Models;

use LorPHP\Core\Model;
use LorPHP\Interfaces\UserInterface;
use LorPHP\Models\Role;
use LorPHP\Models\Organization;
use LorPHP\Models\Client;

/**
 * Class User
 * Represents the User entity.
 *
 * @property string $id
 * @property string $created_at
 * @property string $updated_at
 * @property bool $is_active
 * @property string $modified_by
 * @property string $name
 * @property string $email
 * @property string $password
 * @property string $role_id
 * @property string $organization_id
 */
class User extends Model implements UserInterface
{
    protected static string $tableName = 'users';
    protected static $fillable = ['id', 'id', 'created_at', 'created_at', 'updated_at', 'updated_at', 'is_active', 'is_active', 'modified_by', 'modified_by', 'name', 'name', 'email', 'email', 'password', 'password', 'role_id', 'role_id', 'organization_id', 'organization_id', 'role', 'role', 'organization', 'organization', 'clients', 'clients'];
                
                
    /**
     * Find a record by its email
     * @param string $email The email to search for
     * @return static|null The record if found, null otherwise
     */
    public static function findByEmail(string $email): ?static
    {
        $db = \LorPHP\Core\Database::getInstance();
        $data = $db->findOne(static::$tableName, ['email' => $email]);
        
        if ($data) {
            $model = new static();
            $model->fill($data);
            return $model;
        }
        
        return null;
    }
                
    /**
     * Get related role
     * @return Role[]
     */    public function role(): ?\LorPHP\Core\Model
    {
        return $this->belongsTo(Role::class);
    }
                
    public function getRole()
    {
        return $this->role();
    }

    public function setRole($role): void
    {
        $this->role = $role;
    }
                
    /**
     * Get related organization
     * @return Organization[]
     */    public function organization(): ?\LorPHP\Core\Model
    {
        return $this->belongsTo(Organization::class);
    }
                
    public function getOrganization()
    {
        return $this->organization();
    }

    public function setOrganization($organization): void
    {
        $this->organization = $organization;
    }
                
    /**
     * Get related clients
     * @return Client[]
     */    public function clients(): array
    {
        return $this->manyToMany(Client::class);
    }
                
    public function getClients()
    {
        return $this->clients();
    }

    public function setClients($clients): void
    {
        $this->clients = $clients;
    }
                
    public function getId()
    {
        return $this->id;
    }

    public function setId($id): void
    {
        $this->id = $id;
    }
                
    public function getCreated_at()
    {
        return $this->created_at;
    }

    public function setCreated_at($created_at): void
    {
        $this->created_at = $created_at;
    }
                
    public function getUpdated_at()
    {
        return $this->updated_at;
    }

    public function setUpdated_at($updated_at): void
    {
        $this->updated_at = $updated_at;
    }
                
    public function getIs_active()
    {
        return $this->is_active;
    }

    public function setIs_active($is_active): void
    {
        $this->is_active = $is_active;
    }
                
    public function getModified_by()
    {
        return $this->modified_by;
    }

    public function setModified_by($modified_by): void
    {
        $this->modified_by = $modified_by;
    }
                
    public function getName()
    {
        return $this->name;
    }

    public function setName($name): void
    {
        $this->name = $name;
    }
                
    public function getEmail()
    {
        return $this->email;
    }

    public function setEmail($email): void
    {
        $this->email = $email;
    }
                
    public function getPassword()
    {
        return $this->password;
    }

    public function setPassword($password): void
    {
        $this->password = $password;
    }
                
    public function getRole_id()
    {
        return $this->role_id;
    }

    public function setRole_id($role_id): void
    {
        $this->role_id = $role_id;
    }
                
    public function getOrganization_id()
    {
        return $this->organization_id;
    }

    public function setOrganization_id($organization_id): void
    {
        $this->organization_id = $organization_id;
    }
                
    /**
     * Get all clients in the user's organization
     * @param array $filters Optional filters to apply
     * @return Client[]
     */    public function getOrganizationClients(array $filters = []): array
    {
        if (!isset($this->relations['organization'])) {
            $this->loadRelation('organization', Organization::class, 'organization_id');
        }
        
        if (!isset($this->relations['organization'])) {
            return [];
        }
        
        $items = $this->relations['organization']->getOrganizationClients();
        
        if (empty($filters)) {
            return $items;
        }
        
        return array_filter($items, function($item) use ($filters) {
            foreach ($filters as $key => $value) {
                if ($item->{$key} !== $value) {
                    return false;
                }
            }
            return true;
        });
    }
                
    /**
     * Get all packages in the user's organization
     * @return Package[]
     */    public function getOrganizationPackages(): array
    {
        if (!isset($this->relations['organization'])) {
            $this->loadRelation('organization', Organization::class, 'organization_id');
        }
        
        if (!isset($this->relations['organization'])) {
            return [];
        }
        
        return $this->relations['organization']->getOrganizationPackages();
    }

    public function save(): bool {
        return parent::save();
    }}
